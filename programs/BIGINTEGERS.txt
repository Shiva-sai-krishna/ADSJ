
This algorithm works the way we learned how to do multiplication in 3rd grade,one digit carry. 
So multiplying each digit of the first number by each digit of the second number. It took me a long while to get this though
if written in C or a language that doesn't support more than 64 bit multiplication - this question should be marked as hard.


#include<stdio.h>
void initilize(int *a)
{
    int i;
    for (i=0;i<201;i++)
        a[i]=-1;
}
int findsize(int *a)
{
    int i=200,size=0;
    while (a[i]!=-1)
    {
        size++;
        i--;
    }
    return size;
}
void print(int *a)
{
    int i,s;
    s=findsize(a);
    for (i=200-s+1;i<201;i++)
        printf("%d",a[i]);
}
void multiply(int x,int *a,int *b,int j)
{
    int s=findsize(a),i,m,c,k=j;
    while (j!=0)
    {
        b[200-j+1]=0;
        j--;
    }
    c=0;
    for (i=200;i>200-s;i--)
    {
        m=x*a[i]+c;
        b[i-k]=m%10;
        c=m/10;
    }
    if (c>0)
        b[i-k]=c;
}
void sum(int *b,int *c)
{
    int size,i,sum;
    size=findsize(b);
    for (i=200;i>200-size;i--)
    {
        if (c[i]==-1)
            c[i]=b[i];
        else {
        sum=b[i]+c[i];
        if (sum>9)
        {
            c[i]=sum%10;
            if (c[i-1]==-1)
                c[i-1]=1;
            else
                c[i-1]=c[i-1]+1;
        }
        else
            c[i]=sum;
        }
    }
}
void copy(int *a,int *c)
{
    int i,s=findsize(c);
    for (i=200-s+1;i<201;i++)
        a[i]=c[i];
}
int main()
{
    int a[201],b[201],c[201],n,i,j,x,y;
    initilize(a);
    scanf("%d",&n);
    y=n;
    for (i=200;y!=0;i--)
    {
        a[i]=y%10;
        y=y/10;
    }
    for (i=2;i<n;i++)
    {
        y=i;
        initilize(b);
        initilize(c);
        c[200]=0;
        for (x=y%10,j=0;y!=0;y=y/10,x=y%10,j++)
        {
            multiply(x,a,b,j);
            sum(b,c);
        }
        copy(a,c);
    }
    print(a);
    return 0;
}