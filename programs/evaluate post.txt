#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
typedef struct
{
    float a[20];
    int count;
}stack;
void push(stack *st,float t);
void pop(stack *st);
void post_evaluate(char *s);
int isoperator(char t);
float evaluate(float a,float b,char t);
int main(void)
{
    char s[50];
    printf("enter the postfix expression\n");
    scanf("%s", s);
    printf("the value is\n");
    post_evaluate(s);
    return 0;
}

void push(stack *st,float t)
{
    st->a[st->count++]=t;
}

void pop(stack *st)
{
    st->count--;
}

int isoperator(char t)
{
    if ((t=='-')||(t=='+')||(t=='/')||(t=='*')||(t=='^'))
            return 1;
    else
            return 0;
}

float evaluate(float a,float b,char t)
{
    switch (t)
    {
        case '+':return (a+b);
            break;
        case '-':return (a-b);
            break;
        case '*':return (a*b);
            break;
        case '/':return (a/b);
            break;
        case '^':return pow(a,b);
            break;
    }
}

void post_evaluate(char *s)
{
    stack *st;
    int i;
    float x,y;
    char b[2];
    st=(stack *)malloc(sizeof(stack));
    st->count=0;
    for (i=0;i<strlen(s);i++)
    {
        if (!isoperator(s[i]))
        {
            b[0]=s[i];
            b[1]='\0';
            x=atoi(b);
            push(st,x);
        }
        else
        {
            x=st->a[st->count-1];
            y=st->a[st->count-2];
            x=evaluate(y,x,s[i]);
            pop(st);
            pop(st);
            push(st,x);
        }
    }
    printf("%f\n",st->a[st->count-1]);
}

#include<stdio.h>

#include<stdlib.h>

#include<string.h>

#include<math.h>

#include<ctype.h>

int MAX=50;

struct postfix

{
       int stack[50];
        int top,nn;
      char *s;
};
    void initpostfix(struct postfix *);
     void setexpr(struct postfix *, char *str);
     void push(struct postfix *, int item);
     int pop(struct postfix *);
     void calculate(struct postfix *);
     void show(struct postfix );

int main()
{
   char expr[50];
  printf("Enter postfix expression to be evaluated:\n");
  scanf("%s",expr);
   struct postfix p;
  initpostfix(&p);
  setexpr(&p,expr);
  calculate(&p);
  show(p);
  return 0;
}
void initpostfix(struct postfix *p)
  {
    p->top=0;
    p->nn=0;
  }
void setexpr(struct postfix *p, char *str)
{
strcpy(p->s,str);
}
void push(struct postfix *p, int item)
{
    p->stack[p->top++]=item;
}
int pop(struct postfix *p)
{
    return p->stack[--p->top];
  
}
void calculate(struct postfix *p)
{
int i=0;
while (p->s[i]!='\0')
{
    if (p->s[i]=='+')
    {
        p->nn=p->nn+pop(p)+pop(p);
        push (p,p->nn);
    }
    else if (p->s[i]=='-')
    {
        p->nn=p->nn+pop(p)-pop(p);
        push (p,p->nn);
    }
    else if (p->s[i]=='*')
    {
        p->nn=p->nn+pop(p)*pop(p);
        push (p,p->nn);
    }
    else if (p->s[i]=='/')
    {
        p->nn=p->nn+pop(p)/pop(p);
        push (p,p->nn);
    }
    else if (p->s[i]=='%')
    {
        p->nn=p->nn+pop(p)%pop(p);
        push (p,p->nn);
    }
    else
    {
        push(p,p->s[i]-48);
    }
    i++;
}
}
void show(struct postfix p)
{
     printf("Result is: %d\n",p.nn);
}


